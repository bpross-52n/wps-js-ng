export class LiteralDataOutput {
    constructor(identifier, mimeType, schema, encoding, asReference = false, abstractValue, dataType, uom, value, transmission) {
        this.type = 'literal';
        this.identifier = identifier;
        this.mimeType = mimeType;
        this.schema = schema;
        this.encoding = encoding;
        this.asReference = asReference;
        this.abstractValue = abstractValue;
        this.dataType = dataType;
        this.uom = uom;
        this.value = value;
        if (transmission === undefined) {
            this.transmission = 'value';
        }
        else {
            this.transmission = transmission;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl0ZXJhbC1kYXRhLW91dHB1dC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3dwcy1uZy9zcmMvbW9kZWwvZXhlY3V0ZS5wcm9jZXNzL3JlcXVlc3Qvb3V0cHV0L2xpdGVyYWwtZGF0YS1vdXRwdXQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxPQUFPLGlCQUFpQjtJQWM1QixZQUFZLFVBQWtCLEVBQUUsUUFBZ0IsRUFBRSxNQUFjLEVBQUUsUUFBZ0IsRUFBRSxjQUF1QixLQUFLLEVBQ3BHLGFBQWtCLEVBQUUsUUFBZ0IsRUFBRSxHQUFXLEVBQUUsS0FBYSxFQUFFLFlBQXFCO1FBQ2pHLElBQUksQ0FBQyxJQUFJLEdBQUcsU0FBUyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzdCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQy9CLElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO1FBQ25DLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxZQUFZLEtBQUssU0FBUyxFQUFFO1lBQzlCLElBQUksQ0FBQyxZQUFZLEdBQUcsT0FBTyxDQUFDO1NBQzdCO2FBQ0k7WUFDSCxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztTQUNsQztJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGF0YU91dHB1dH0gZnJvbSAnLi9kYXRhLW91dHB1dCc7XG5cbmV4cG9ydCBjbGFzcyBMaXRlcmFsRGF0YU91dHB1dCBpbXBsZW1lbnRzIERhdGFPdXRwdXR7XG4gIHJlYWRvbmx5IHR5cGU6IHN0cmluZztcbiAgcmVhZG9ubHkgaWRlbnRpZmllcjogc3RyaW5nO1xuICByZWFkb25seSBtaW1lVHlwZTogc3RyaW5nO1xuICByZWFkb25seSBzY2hlbWE6IHN0cmluZztcbiAgcmVhZG9ubHkgZW5jb2Rpbmc6IHN0cmluZztcbiAgcmVhZG9ubHkgYXNSZWZlcmVuY2U6IGJvb2xlYW47XG4gIHJlYWRvbmx5IGFic3RyYWN0VmFsdWU6IGFueTtcbiAgcmVhZG9ubHkgZGF0YVR5cGU6IHN0cmluZztcbiAgcmVhZG9ubHkgdW9tOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHZhbHVlOiBhbnk7XG4gIHJlYWRvbmx5IHRyYW5zbWlzc2lvbjogc3RyaW5nO1xuXG5cbiAgY29uc3RydWN0b3IoaWRlbnRpZmllcjogc3RyaW5nLCBtaW1lVHlwZTogc3RyaW5nLCBzY2hlbWE6IHN0cmluZywgZW5jb2Rpbmc6IHN0cmluZywgYXNSZWZlcmVuY2U6IGJvb2xlYW4gPSBmYWxzZSxcbiAgICAgICAgICAgICAgYWJzdHJhY3RWYWx1ZTogYW55LCBkYXRhVHlwZTogc3RyaW5nLCB1b206IHN0cmluZywgdmFsdWU6IHN0cmluZywgdHJhbnNtaXNzaW9uPzogc3RyaW5nKSB7XG4gICAgdGhpcy50eXBlID0gJ2xpdGVyYWwnO1xuICAgIHRoaXMuaWRlbnRpZmllciA9IGlkZW50aWZpZXI7XG4gICAgdGhpcy5taW1lVHlwZSA9IG1pbWVUeXBlO1xuICAgIHRoaXMuc2NoZW1hID0gc2NoZW1hO1xuICAgIHRoaXMuZW5jb2RpbmcgPSBlbmNvZGluZztcbiAgICB0aGlzLmFzUmVmZXJlbmNlID0gYXNSZWZlcmVuY2U7XG4gICAgdGhpcy5hYnN0cmFjdFZhbHVlID0gYWJzdHJhY3RWYWx1ZTtcbiAgICB0aGlzLmRhdGFUeXBlID0gZGF0YVR5cGU7XG4gICAgdGhpcy51b20gPSB1b207XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIGlmICh0cmFuc21pc3Npb24gPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGhpcy50cmFuc21pc3Npb24gPSAndmFsdWUnO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMudHJhbnNtaXNzaW9uID0gdHJhbnNtaXNzaW9uO1xuICAgIH1cbiAgfVxufVxuIl19